Testing at the boundaries: using Consumer Driven Contracts to keep your microservices in sync
Andrew Fitzgerald

https://github.com/Fitzoh/testing-at-the-boundaries

Microservices: lessons learned
:)
	faster deployments
	fits in (human) memory
	code ownership
	testing
:(
	automation required
	tracing requests
	code duplication
	testing

Testing service-to-service interactions
	stand up the world
		very heavy
	mock out dependencies
		can get out of date

CDC terms
	provider: gives response to consumer
	consumer: makes requests to providers
	contract: describes interactions between consumer and provider
	consumer driven contracts: behavior of consumer drives provider

use Pact to mock the service for testing
	https://docs.pact.io/
	it("should whatever")
		.uponReceiving("a request")
		.given("whatever")
		.withRequest(request)
		.willResponWith(401, {...})
	generates pact json files to document tests (contracts)

Enables TDD at the architectural level

Pascal's Law: Be conservative in what you do, but liberal in what you accept from others

Common CDC framework features
	mock server for consumer tests
	generated tests for provider
	final artifacts generated by rnning tests
	mechanism for managing contract files

Pact
	pact broker
	messaging
	multiple languages
Spring cloud contract
	first class spring support
	reusable stube
	service discovery
	messaging
